# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QWvrm7DMfNfuwntTT-t58cc75RieCEen
"""

class Usuario:
    def __init__(self, nome, cargo):
        self.nome = nome
        self.cargo = cargo
        self.acessos = []

class Estoque:
    def __init__(self, nome_filial):
        self.nome_filial = nome_filial
        self.itens = {}

    def adicionar_item(self, item, quantidade):
        if item in self.itens:
            self.itens[item] += quantidade
        else:
            self.itens[item] = quantidade

    def remover_item(self, item, quantidade):
        if item in self.itens and self.itens[item] >= quantidade:
            self.itens[item] -= quantidade
        else:
            print(f"Quantidade insuficiente de {item} em estoque.")

class SistemaControleEstoque:
    def __init__(self):
        self.usuarios = []
        self.estoques = []

    def adicionar_usuario(self, nome, cargo):
        usuario = Usuario(nome, cargo)
        self.usuarios.append(usuario)
        return usuario

    def adicionar_estoque(self, nome_filial):
        estoque = Estoque(nome_filial)
        self.estoques.append(estoque)
        return estoque

    def conceder_acesso(self, usuario, area_acesso):
        usuario.acessos.append(area_acesso)

    def monitorar_estoque(self, estoque):
        print(f"Estoque da Filial {estoque.nome_filial}:")
        for item, quantidade in estoque.itens.items():
            print(f"{item}: {quantidade} unidades")

    def alerta_estoque_baixo(self, estoque, limite):
        for item, quantidade in estoque.itens.items():
            if quantidade < limite:
                print(f"ALERTA: Estoque baixo de {item} na Filial {estoque.nome_filial}!")

    def monitoramento_tempo_real(self):
        print("\nMonitoramento em Tempo Real de Todas as Filiais:")
        for estoque in self.estoques:
            self.monitorar_estoque(estoque)
        print("\n--- Fim do Monitoramento em Tempo Real ---")

sistema = SistemaControleEstoque()

nome_gerente = input("Digite o nome do gerente: ")
gerente = sistema.adicionar_usuario(nome_gerente, "Gerente")
print(f"Gerente: {gerente.nome}")

nome_chef = input("Digite o nome do chef de cozinha: ")
chef_cozinha = sistema.adicionar_usuario(nome_chef, "Chef de Cozinha")
print(f"Chef de Cozinha: {chef_cozinha.nome}")

nome_filial_a = input("Digite o nome da Filial A: ")
filial_a = sistema.adicionar_estoque(nome_filial_a)

nome_filial_b = input("Digite o nome da Filial B: ")
filial_b = sistema.adicionar_estoque(nome_filial_b)

sistema.conceder_acesso(gerente, "MonitorarEstoque")
sistema.conceder_acesso(chef_cozinha, "MonitorarEstoque")
sistema.conceder_acesso(chef_cozinha, "AtualizarEstoque")

item_nome = input("Digite o nome do item na Filial A: ")
quantidade_str = input("Digite a quantidade do item na Filial A: ")

if quantidade_str.isdigit():
    quantidade = int(quantidade_str)
    filial_a.adicionar_item(item_nome, quantidade)
else:
    print("A quantidade deve ser um número inteiro.")

sistema.monitoramento_tempo_real()

limite_alerta = int(input("Digite o limite de estoque para alerta na Filial A: "))
sistema.alerta_estoque_baixo(filial_a, limite_alerta)

# Adicionar item à Filial B
item_nome_filial_b = input("Digite o nome do item na Filial B: ")
quantidade_str_filial_b = input("Digite a quantidade do item na Filial B: ")

if quantidade_str_filial_b.isdigit():
    quantidade_filial_b = int(quantidade_str_filial_b)
    filial_b.adicionar_item(item_nome_filial_b, quantidade_filial_b)
else:
    print("A quantidade deve ser um número inteiro.")

# Monitorar estoque em tempo real da Filial B
sistema.monitoramento_tempo_real()

limite_alerta_filial_b = int(input("Digite o limite de estoque para alerta na Filial B: "))
sistema.alerta_estoque_baixo(filial_b, limite_alerta_filial_b)


class SistemaRestaurante:
    def __init__(self):
        self.funcionarios = {}
        self.produtos = {}
        self.estoque = {}

    def cadastrar_funcionario(self, nome, perfil):
        self.funcionarios[nome] = {'perfil': perfil, 'areas_acesso': []}

    def definir_acesso(self, nome, areas_acesso):
        if nome in self.funcionarios:
            self.funcionarios[nome]['areas_acesso'] = areas_acesso
        else:
            print(f"Funcionário {nome} não encontrado.")

    def exibir_informacoes_funcionario(self, nome):
        if nome in self.funcionarios:
            info = self.funcionarios[nome]
            print(f"Informações do funcionário {nome}:")
            print(f"Perfil de acesso: {info['perfil']}")
            print(f"Áreas de acesso: {info['areas_acesso']}")
        else:
            print(f"Funcionário {nome} não encontrado.")

    def cadastrar_produto(self, nome, tipo, ingredientes, estoque_inicial=0):
        self.produtos[nome] = {'tipo': tipo, 'ingredientes': ingredientes}
        self.estoque[nome] = estoque_inicial

    def exibir_lista_produtos(self):
        print("Lista de Produtos:")
        for nome, info in self.produtos.items():
            print(f"{nome} - Tipo: {info['tipo']}, Ingredientes: {info['ingredientes']}, Estoque: {self.estoque[nome]} unidades")

    def exibir_informacoes_produto(self, nome):
        if nome in self.produtos:
            info = self.produtos[nome]
            print(f"Informações do Produto {nome}:")
            print(f"Tipo: {info['tipo']}")
            print(f"Ingredientes: {info['ingredientes']}")
            print(f"Estoque: {self.estoque[nome]} unidades")
        else:
            print(f"Produto {nome} não encontrado.")

    def monitorar_estoque(self):
        print("Monitoramento em Tempo Real do Estoque:")
        for produto, quantidade in self.estoque.items():
            print(f"{produto}: {quantidade} unidades")

    def alerta_estoque_baixo(self, limite=10):
        print("Alertas de Estoque Baixo:")
        for produto, quantidade in self.estoque.items():
            if quantidade < limite:
                print(f"Alerta: Estoque baixo para {produto}. Quantidade disponível: {quantidade} unidades.")


sistema = SistemaRestaurante()

nome_funcionario = input("Digite o nome do funcionário: ")
perfil_funcionario = input("Digite o perfil do funcionário: ")
sistema.cadastrar_funcionario(nome_funcionario, perfil_funcionario)

nome_funcionario_acesso = input("Digite o nome do funcionário para definir acesso: ")
areas_acesso = input("Digite as áreas de acesso (separadas por vírgula): ").split(',')
sistema.definir_acesso(nome_funcionario_acesso, areas_acesso)

nome_produto = input("Digite o nome do produto: ")
tipo_produto = input("Digite o tipo do produto: ")
ingredientes_produto = input("Digite os ingredientes do produto (separados por vírgula): ").split(',')
estoque_inicial_produto = int(input("Digite a quantidade inicial em estoque: "))
sistema.cadastrar_produto(nome_produto, tipo_produto, ingredientes_produto, estoque_inicial_produto)

sistema.exibir_lista_produtos()

sistema.monitorar_estoque()

sistema.alerta_estoque_baixo(limite=10)

class Funcionario:
    def __init__(self, nome, cargo, salario):
        self.nome = nome
        self.cargo = cargo
        self.salario = salario
        self.registro_horas = []
        self.avaliacao_desempenho = None

    def adicionar_registro_horas(self, data, horas_trabalhadas):
        self.registro_horas.append({"data": data, "horas_trabalhadas": horas_trabalhadas})

    def registrar_avaliacao_desempenho(self, avaliacao):
        self.avaliacao_desempenho = avaliacao

class Filial:
    def __init__(self, nome):
        self.nome = nome
        self.funcionarios = []

    def adicionar_funcionario(self, funcionario):
        self.funcionarios.append(funcionario)

    def listar_funcionarios(self):
        for funcionario in self.funcionarios:
            print(f"Nome: {funcionario.nome}, Cargo: {funcionario.cargo}, Salário: {funcionario.salario}")

    def gerar_escala_trabalho(self, data, equipe):
        for funcionario in equipe:
            print(f"Funcionário: {funcionario.nome}, Data: {data}")

class SistemaGestao:
    def __init__(self):
        self.filiais = []

    def adicionar_filial(self, filial):
        self.filiais.append(filial)

    def listar_filiais(self):
        for filial in self.filiais:
            print(f"Filial: {filial.nome}")
            filial.listar_funcionarios()

    def cadastrar_funcionario(self, filial, nome, cargo, salario):
        novo_funcionario = Funcionario(nome, cargo, salario)
        filial.adicionar_funcionario(novo_funcionario)
        print(f"Funcionário {nome} cadastrado com sucesso na filial {filial.nome}")

    def gerenciar_escala_trabalho(self, filial, data, equipe):
        filial.gerar_escala_trabalho(data, equipe)

    def registrar_horas_trabalho(self, funcionario, data, horas_trabalhadas):
        funcionario.adicionar_registro_horas(data, horas_trabalhadas)
        print(f"Horas registradas para {funcionario.nome} no dia {data}: {horas_trabalhadas} horas")

    def avaliar_desempenho(self, funcionario, avaliacao):
        funcionario.registrar_avaliacao_desempenho(avaliacao)
        print(f"Avaliação de desempenho registrada para {funcionario.nome}: {avaliacao}")

    def obter_filial_por_nome(self, nome_filial):
        for filial in self.filiais:
            if filial.nome.lower() == nome_filial.lower():
                return filial
        return None

def interacao_usuario():
    sistema = SistemaGestao()

    while True:
        nome_filial = input("Digite o nome da filial (ou 'exit' para sair): ")
        if nome_filial.lower() == 'exit':
            break
        filial = Filial(nome_filial)
        sistema.adicionar_filial(filial)

    while True:
        nome_filial = input("Digite o nome da filial para cadastrar um funcionário (ou 'exit' para sair): ")
        if nome_filial.lower() == 'exit':
            break

        filial_encontrada = sistema.obter_filial_por_nome(nome_filial)

        if filial_encontrada:
            nome_funcionario = input("Digite o nome do funcionário: ")
            cargo_funcionario = input("Digite o cargo do funcionário: ")
            salario_funcionario = float(input("Digite o salário do funcionário: "))
            sistema.cadastrar_funcionario(filial_encontrada, nome_funcionario, cargo_funcionario, salario_funcionario)
        else:
            print("Filial não encontrada.")

    while True:
        nome_filial = input("Digite o nome da filial para gerar a escala de trabalho (ou 'exit' para sair): ")
        if nome_filial.lower() == 'exit':
            break

        filial_encontrada = sistema.obter_filial_por_nome(nome_filial)

        if filial_encontrada:
            data_escala = input("Digite a data da escala de trabalho (formato YYYY-MM-DD): ")
            equipe_filial = filial_encontrada.funcionarios
            sistema.gerenciar_escala_trabalho(filial_encontrada, data_escala, equipe_filial)
        else:
            print("Filial não encontrada.")

interacao_usuario()

class Ingrediente:
    def __init__(self, nome):
        self.nome = nome

class Pedido:
    def __init__(self, prato, valor_total):
        self.prato = prato
        self.valor_total = valor_total

class Cliente:
    def __init__(self, nome, email, telefone):
        self.nome = nome
        self.email = email
        self.telefone = telefone

class Relatorios:
    def gerar_relatorio_vendas(self, pedidos):
        print("Relatório de Vendas:")
        total_vendas = 0

        for pedido in pedidos:
            print(f"Prato: {pedido.prato}, Valor: R${pedido.valor_total}")
            total_vendas += pedido.valor_total

        print(f"\nValor Total da Venda: R${total_vendas:.2f}")
        print("=" * 50)

    def gerar_relatorio_movimentacao_estoque(self, pedidos):
        print("Relatório de Movimentação de Estoque:")
        # Implemente a lógica conforme necessário
        print("=" * 50)

    def gerar_relatorio_eficiencia_operacional(self, quantidade_vendas, valor_entrada, valor_saida, horas_colaboradores):
        print("Relatório de Eficiência Operacional:")

        # Cálculo da Eficiência Operacional
        eficiencia_operacional = valor_entrada / valor_saida
        print(f"Eficiência Operacional: {eficiencia_operacional:.2f}")

        # Cálculo das Horas por Venda
        horas_por_venda = horas_colaboradores / quantidade_vendas
        print(f"Horas necessárias para gerar uma venda: {horas_por_venda:.2f} horas")

        print("=" * 50)

class Estoque:
    def __init__(self):
        # Dicionário para armazenar o estoque
        self.estoque = {}

    def adicionar_ingrediente(self, nome, quantidade_inicial, quantidade_minima):
        self.estoque[nome] = {'quantidade': quantidade_inicial, 'minima': quantidade_minima}

    def verificar_estoque(self, ingredientes):
        for ingrediente in ingredientes:
            if self.estoque[ingrediente]['quantidade'] <= 0:
                return False
        return True

    def verificar_reposicao_estoque(self, tabela_ingredientes):
        for ingrediente, quantidade_atual in self.estoque.items():
            if quantidade_atual['quantidade'] < quantidade_atual['minima']:
                print(f"Ingrediente em falta: {ingrediente}. Pedir ao fornecedor.")
                # Atualizar a tabela de ingredientes
                tabela_ingredientes[ingrediente] += 50
                self.estoque[ingrediente]['quantidade'] += 50

# Exemplo de uso:

# Coleta informações do cliente
nome_cliente = input("Digite o nome do cliente: ")
email_cliente = input("Digite o email do cliente: ")
telefone_cliente = input("Digite o telefone do cliente: ")

# Cria instância do cliente
cliente = Cliente(nome_cliente, email_cliente, telefone_cliente)

# Coleta informações do pedido
prato_pedido = input("Digite o nome do prato: ")
valor_total_pedido = float(input("Digite o valor total do pedido: "))

# Cria instância do pedido
pedido = Pedido(prato_pedido, valor_total_pedido)

# Cria lista de pedidos
pedidos = [pedido]

# Cria instância do relatório
relatorio = Relatorios()

# Gera relatório de vendas
relatorio.gerar_relatorio_vendas(pedidos)

class Ingrediente:
    def __init__(self, nome):
        self.nome = nome

class Pedido:
    def __init__(self, prato, valor_total):
        self.prato = prato
        self.valor_total = valor_total

class Cliente:
    def __init__(self, nome, email, telefone):
        self.nome = nome
        self.email = email
        self.telefone = telefone

class Relatorios:
    def gerar_relatorio_vendas(self, pedidos):
        print("Relatório de Vendas:")
        total_vendas = 0

        for pedido in pedidos:
            print(f"Prato: {pedido.prato}, Valor: R${pedido.valor_total}")
            total_vendas += pedido.valor_total

        print(f"\nValor Total da Venda: R${total_vendas:.2f}")
        print("=" * 50)

    def gerar_relatorio_movimentacao_estoque(self, pedidos):
        print("Relatório de Movimentação de Estoque:")
        # Implemente a lógica conforme necessário
        print("=" * 50)

    def gerar_relatorio_eficiencia_operacional(self, quantidade_vendas, valor_entrada, valor_saida, horas_colaboradores):
        print("Relatório de Eficiência Operacional:")

        # Cálculo da Eficiência Operacional
        eficiencia_operacional = valor_entrada / valor_saida
        print(f"Eficiência Operacional: {eficiencia_operacional:.2f}")

        # Cálculo das Horas por Venda
        horas_por_venda = horas_colaboradores / quantidade_vendas
        print(f"Horas necessárias para gerar uma venda: {horas_por_venda:.2f} horas")

        print("=" * 50)

class SistemaRestaurante:
    def __init__(self):
        # Dados de acesso para os chefs de cozinha
        self.chef_usuario = "Ailton"
        self.chef_senha = "271204"

        # Dicionário para armazenar o cardápio
        self.cardapio = {
            'Carbonara': {
                'ingredientes': ['Massa', 'Ovo', 'Queijo parmessão', 'Pancetta'],
                'preco': 25.99,
                'instrucoes_preparo': 'Cozinhe a massa. Jogue ela cozida em uma frigideira com um pouco da água do cozimento, frite a pancetta. Misture a massa, os ovos e a pancetta.'
            },
            'Arroz a Piamontese': {
                'ingredientes': ['Arroz', 'Creme de leite', 'Queijo', 'Presunto'],
                'preco': 20.99,
                'instrucoes_preparo': 'Cozinhe o arroz. Misture o arroz cozido com creme de leite, queijo e presunto.'
            },
            'Macarrão aos 4 Queijos': {
                'ingredientes': ['Macarrão', 'Queijo mussarela', 'Queijo parmesão', 'Queijo gorgonzola', 'Queijo provolone'],
                'preco': 22.99,
                'instrucoes_preparo': 'Cozinhe o macarrão. Misture o macarrão cozido com os quatro tipos de queijo e creme de leite.'
            },
            'Filé Mignon': {
                'ingredientes': ['Carne', 'Sal', 'Pimenta'],
                'preco': 35.99,
                'instrucoes_preparo': 'Tempere o filé mignon com sal e pimenta. Grelhe a carne até atingir o ponto desejado.'
            },
            'Risotto': {
                'ingredientes': ['Arroz Arbóreo', 'Caldo de galinha', 'Queijo parmesão', 'Vinho branco', 'Cebola'],
                'preco': 27.50,
                'instrucoes_preparo': 'Refogue a cebola, adicione o arroz e vinho branco. Cozinhe adicionando caldo de galinha aos poucos. Finalize com queijo parmesão.'
            }
        }

        # Instanciando o estoque
        self.estoque = Estoque()

        # Adicionando ingredientes ao estoque
        for prato, detalhes in self.cardapio.items():
            for ingrediente in detalhes['ingredientes']:
                self.estoque.adicionar_ingrediente(ingrediente, 50, 15)

        # Tabela de ingredientes
        self.tabela_ingredientes = {ingrediente: 50 for ingrediente in self.estoque.estoque}

        # Lista para armazenar pedidos
        self.pedidos = []

        # Lista para armazenar clientes
        self.clientes = []

        # Instanciando os relatórios
        self.relatorios = Relatorios()


    def login_chef(self, usuario, senha):
        return usuario == self.chef_usuario and senha == self.chef_senha

    def exibir_cardapio(self):
        print('Cardápio:')
        print('=' * 120)
        for prato, detalhes in self.cardapio.items():
            print(f'{prato}: {detalhes["ingredientes"]} - R${detalhes["preco"]}')
            print(f'Instruções de Preparo: {detalhes["instrucoes_preparo"]}\n')

    def realizar_pedido(self, prato):
        ingredientes_prato = self.cardapio[prato]["ingredientes"]
        if self.estoque.verificar_estoque(ingredientes_prato):
            print(f"Prato {prato} preparado!")
            self.estoque.verificar_reposicao_estoque(self.tabela_ingredientes)
            # Atualizar a tabela de ingredientes
            for ingrediente in ingredientes_prato:
                self.tabela_ingredientes[ingrediente] -= 1
                self.estoque.estoque[ingrediente]['quantidade'] -= 1
            # Adicionar o pedido à lista de pedidos
            valor_total = self.cardapio[prato]["preco"]
            pedido = Pedido(prato, valor_total)
            self.pedidos.append(pedido)
        else:
            print(f"Não foi possível preparar o prato {prato}. Ingredientes em falta.")

    def ver_tabela_ingredientes(self):
        print('Tabela de Ingredientes:')
        print('=' * 120)
        for ingrediente, quantidade in self.tabela_ingredientes.items():
            print(f'{ingrediente}: {quantidade} unidades')

    def pedir_ingredientes_fornecedor(self):
        print("Pedido de ingredientes ao fornecedor realizado.")
        # Atualizar a tabela de ingredientes
        for ingrediente in self.tabela_ingredientes:
            self.tabela_ingredientes[ingrediente] += 50
            self.estoque.estoque[ingrediente]['quantidade'] += 50

    def cadastrar_cliente(self):

        nome = str(input("Digite o nome do cliente: "))

        while True:
            email = input("Digite o e-mail do cliente: ")

            if '@' in email and '.' in email:
                break

            else:
                print("Email inválido. Certifique-se de incluir '@' e '.' no endereço de email.")

        while True:
            telefone = input("Digite o telefone do cliente: ")

            if telefone.isdigit():
                break

            else:
                print("Telefone inválido. Certifique-se de incluir apenas números.")

        novo_cliente = Cliente(nome, email, telefone)
        self.clientes.append(novo_cliente)
        print(f"Cliente {nome} cadastrado com sucesso!")

    def preparar_pratos(self):
        while True:
            print("\nMenu de Opções:")
            print("1. Preparar prato")
            print("2. Ver Tabela de ingredientes")
            print("3. Pedir Ingredientes a fornecedores")
            print("4. Sair")

            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                prato_escolhido = input("Digite o nome do prato desejado: ")
                if prato_escolhido in self.cardapio:
                    self.realizar_pedido(prato_escolhido)
                else:
                    print(f"O prato {prato_escolhido} não está no cardápio. Por favor, escolha um prato válido.")
            elif opcao == '2':
                self.ver_tabela_ingredientes()
            elif opcao == '3':
                self.pedir_ingredientes_fornecedor()
            elif opcao == '4':
                print("Preparação de pratos encerrada.")
                break
            else:
                print("Opção inválida. Tente novamente.")

# Relatórios Gerenciais

    def menu_gerente(self):

        while True:
            print("\nMenu Gerente:")
            print("1. Gerar Relatório de Vendas")
            print("2. Gerar Relatório de Movimentação de Estoque")
            print("3. Gerar Relatório de Eficiência Operacional")
            print("4. Cadastrar Cliente")
            print("5. Sair")

            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                self.relatorios.gerar_relatorio_vendas(self.pedidos)

            elif opcao == '2':
                self.relatorios.gerar_relatorio_movimentacao_estoque(self.pedidos, self.cardapio)

            elif opcao == '3':
                quantidade_vendas = int(input("Digite a quantidade de vendas: "))
                valor_entrada = float(input("Digite o valor total das vendas: "))
                valor_saida = float(input("Digite o valor total das despesas: "))
                horas_colaboradores = 200

                self.relatorios.gerar_relatorio_eficiencia_operacional(quantidade_vendas, valor_entrada, valor_saida, horas_colaboradores)

            elif opcao == '4':
                self.cadastrar_cliente()

            elif opcao == '5':
                print("Saindo do Menu Gerente.")
                break

            else:
                print("Opção inválida. Tente novamente.")

# Exemplo de uso
sistema = SistemaRestaurante()

usuario = input("Digite o usuário: ")
senha = input("Digite a senha: ")

if sistema.login_chef(usuario, senha):
    print("Login bem-sucedido. Bem-vindo, Chef Ailton!")

    sistema.exibir_cardapio()
    sistema.preparar_pratos()
    sistema.menu_gerente()